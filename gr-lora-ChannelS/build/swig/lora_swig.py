# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_lora_swig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_lora_swig')
    _lora_swig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_lora_swig', [dirname(__file__)])
        except ImportError:
            import _lora_swig
            return _lora_swig
        try:
            _mod = imp.load_module('_lora_swig', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _lora_swig = swig_import_helper()
    del swig_import_helper
else:
    import _lora_swig
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _lora_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _lora_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _lora_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _lora_swig.high_res_timer_epoch()
DEMOD_HISTORY_DEPTH = _lora_swig.DEMOD_HISTORY_DEPTH
REQUIRED_PREAMBLE_CHIRPS = _lora_swig.REQUIRED_PREAMBLE_CHIRPS
REQUIRED_SFD_CHIRPS = _lora_swig.REQUIRED_SFD_CHIRPS
LORA_SFD_TOLERANCE = _lora_swig.LORA_SFD_TOLERANCE
LORA_PREAMBLE_TOLERANCE = _lora_swig.LORA_PREAMBLE_TOLERANCE
DEMOD_SYNC_RECOVERY_COUNT = _lora_swig.DEMOD_SYNC_RECOVERY_COUNT
S_RESET = _lora_swig.S_RESET
S_PREFILL = _lora_swig.S_PREFILL
S_DETECT_PREAMBLE = _lora_swig.S_DETECT_PREAMBLE
S_SFD_SYNC = _lora_swig.S_SFD_SYNC
S_READ_HEADER = _lora_swig.S_READ_HEADER
S_READ_PAYLOAD = _lora_swig.S_READ_PAYLOAD
S_OUT = _lora_swig.S_OUT
class demod(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(spreading_factor, low_data_rate, beta, fft_factor):
        """
        make(unsigned short spreading_factor, bool low_data_rate, float beta, unsigned short fft_factor) -> demod_sptr

        Return a shared_ptr to a new instance of lora::demod.

        To avoid accidental use of raw pointers, lora::demod's constructor is in a private implementation class. lora::demod::make is the public interface for creating new instances.

        Params: (spreading_factor, low_data_rate, beta, fft_factor)
        """
        return _lora_swig.demod_make(spreading_factor, low_data_rate, beta, fft_factor)

    make = staticmethod(make)
    __swig_destroy__ = _lora_swig.delete_demod
    __del__ = lambda self: None
demod_swigregister = _lora_swig.demod_swigregister
demod_swigregister(demod)

def demod_make(spreading_factor, low_data_rate, beta, fft_factor):
    """
    demod_make(unsigned short spreading_factor, bool low_data_rate, float beta, unsigned short fft_factor) -> demod_sptr

    Return a shared_ptr to a new instance of lora::demod.

    To avoid accidental use of raw pointers, lora::demod's constructor is in a private implementation class. lora::demod::make is the public interface for creating new instances.

    Params: (spreading_factor, low_data_rate, beta, fft_factor)
    """
    return _lora_swig.demod_make(spreading_factor, low_data_rate, beta, fft_factor)

class demod_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lora::demod)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lora::demod)> self) -> demod_sptr
        __init__(boost::shared_ptr<(gr::lora::demod)> self, demod p) -> demod_sptr
        """
        this = _lora_swig.new_demod_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(demod_sptr self) -> demod"""
        return _lora_swig.demod_sptr___deref__(self)

    __swig_destroy__ = _lora_swig.delete_demod_sptr
    __del__ = lambda self: None

    def make(self, spreading_factor, low_data_rate, beta, fft_factor):
        """
        make(demod_sptr self, unsigned short spreading_factor, bool low_data_rate, float beta, unsigned short fft_factor) -> demod_sptr

        Return a shared_ptr to a new instance of lora::demod.

        To avoid accidental use of raw pointers, lora::demod's constructor is in a private implementation class. lora::demod::make is the public interface for creating new instances.

        Params: (spreading_factor, low_data_rate, beta, fft_factor)
        """
        return _lora_swig.demod_sptr_make(self, spreading_factor, low_data_rate, beta, fft_factor)


    def history(self):
        """history(demod_sptr self) -> unsigned int"""
        return _lora_swig.demod_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(demod_sptr self, int which, int delay)
        declare_sample_delay(demod_sptr self, unsigned int delay)
        """
        return _lora_swig.demod_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(demod_sptr self, int which) -> unsigned int"""
        return _lora_swig.demod_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(demod_sptr self) -> int"""
        return _lora_swig.demod_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(demod_sptr self) -> double"""
        return _lora_swig.demod_sptr_relative_rate(self)


    def start(self):
        """start(demod_sptr self) -> bool"""
        return _lora_swig.demod_sptr_start(self)


    def stop(self):
        """stop(demod_sptr self) -> bool"""
        return _lora_swig.demod_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(demod_sptr self, unsigned int which_input) -> uint64_t"""
        return _lora_swig.demod_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(demod_sptr self, unsigned int which_output) -> uint64_t"""
        return _lora_swig.demod_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(demod_sptr self) -> int"""
        return _lora_swig.demod_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(demod_sptr self, int m)"""
        return _lora_swig.demod_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(demod_sptr self)"""
        return _lora_swig.demod_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(demod_sptr self) -> bool"""
        return _lora_swig.demod_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(demod_sptr self, int m)"""
        return _lora_swig.demod_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(demod_sptr self) -> int"""
        return _lora_swig.demod_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(demod_sptr self, int i) -> long"""
        return _lora_swig.demod_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(demod_sptr self, long max_output_buffer)
        set_max_output_buffer(demod_sptr self, int port, long max_output_buffer)
        """
        return _lora_swig.demod_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(demod_sptr self, int i) -> long"""
        return _lora_swig.demod_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(demod_sptr self, long min_output_buffer)
        set_min_output_buffer(demod_sptr self, int port, long min_output_buffer)
        """
        return _lora_swig.demod_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(demod_sptr self) -> float"""
        return _lora_swig.demod_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(demod_sptr self) -> float"""
        return _lora_swig.demod_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(demod_sptr self) -> float"""
        return _lora_swig.demod_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(demod_sptr self) -> float"""
        return _lora_swig.demod_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(demod_sptr self) -> float"""
        return _lora_swig.demod_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(demod_sptr self) -> float"""
        return _lora_swig.demod_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(demod_sptr self, int which) -> float
        pc_input_buffers_full(demod_sptr self) -> pmt_vector_float
        """
        return _lora_swig.demod_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(demod_sptr self, int which) -> float
        pc_input_buffers_full_avg(demod_sptr self) -> pmt_vector_float
        """
        return _lora_swig.demod_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(demod_sptr self, int which) -> float
        pc_input_buffers_full_var(demod_sptr self) -> pmt_vector_float
        """
        return _lora_swig.demod_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(demod_sptr self, int which) -> float
        pc_output_buffers_full(demod_sptr self) -> pmt_vector_float
        """
        return _lora_swig.demod_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(demod_sptr self, int which) -> float
        pc_output_buffers_full_avg(demod_sptr self) -> pmt_vector_float
        """
        return _lora_swig.demod_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(demod_sptr self, int which) -> float
        pc_output_buffers_full_var(demod_sptr self) -> pmt_vector_float
        """
        return _lora_swig.demod_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(demod_sptr self) -> float"""
        return _lora_swig.demod_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(demod_sptr self) -> float"""
        return _lora_swig.demod_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(demod_sptr self) -> float"""
        return _lora_swig.demod_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(demod_sptr self) -> float"""
        return _lora_swig.demod_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(demod_sptr self) -> float"""
        return _lora_swig.demod_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(demod_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lora_swig.demod_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(demod_sptr self)"""
        return _lora_swig.demod_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(demod_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lora_swig.demod_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(demod_sptr self) -> int"""
        return _lora_swig.demod_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(demod_sptr self) -> int"""
        return _lora_swig.demod_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(demod_sptr self, int priority) -> int"""
        return _lora_swig.demod_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(demod_sptr self) -> std::string"""
        return _lora_swig.demod_sptr_name(self)


    def symbol_name(self):
        """symbol_name(demod_sptr self) -> std::string"""
        return _lora_swig.demod_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(demod_sptr self) -> io_signature_sptr"""
        return _lora_swig.demod_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(demod_sptr self) -> io_signature_sptr"""
        return _lora_swig.demod_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(demod_sptr self) -> long"""
        return _lora_swig.demod_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(demod_sptr self) -> basic_block_sptr"""
        return _lora_swig.demod_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(demod_sptr self, int ninputs, int noutputs) -> bool"""
        return _lora_swig.demod_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(demod_sptr self) -> std::string"""
        return _lora_swig.demod_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(demod_sptr self, std::string name)"""
        return _lora_swig.demod_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(demod_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lora_swig.demod_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(demod_sptr self) -> swig_int_ptr"""
        return _lora_swig.demod_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(demod_sptr self) -> swig_int_ptr"""
        return _lora_swig.demod_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(demod_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lora_swig.demod_sptr_message_subscribers(self, which_port)

demod_sptr_swigregister = _lora_swig.demod_sptr_swigregister
demod_sptr_swigregister(demod_sptr)


demod_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
demod = demod.make;

SYMBOL_TIMEOUT_COUNT = _lora_swig.SYMBOL_TIMEOUT_COUNT
class decode(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(spreading_factor, code_rate, low_data_rate, header):
        """
        make(short spreading_factor, short code_rate, bool low_data_rate, bool header) -> decode_sptr

        Return a shared_ptr to a new instance of lora::decode.

        To avoid accidental use of raw pointers, lora::decode's constructor is in a private implementation class. lora::decode::make is the public interface for creating new instances.

        Params: (spreading_factor, code_rate, low_data_rate, header)
        """
        return _lora_swig.decode_make(spreading_factor, code_rate, low_data_rate, header)

    make = staticmethod(make)
    __swig_destroy__ = _lora_swig.delete_decode
    __del__ = lambda self: None
decode_swigregister = _lora_swig.decode_swigregister
decode_swigregister(decode)

def decode_make(spreading_factor, code_rate, low_data_rate, header):
    """
    decode_make(short spreading_factor, short code_rate, bool low_data_rate, bool header) -> decode_sptr

    Return a shared_ptr to a new instance of lora::decode.

    To avoid accidental use of raw pointers, lora::decode's constructor is in a private implementation class. lora::decode::make is the public interface for creating new instances.

    Params: (spreading_factor, code_rate, low_data_rate, header)
    """
    return _lora_swig.decode_make(spreading_factor, code_rate, low_data_rate, header)

class decode_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lora::decode)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lora::decode)> self) -> decode_sptr
        __init__(boost::shared_ptr<(gr::lora::decode)> self, decode p) -> decode_sptr
        """
        this = _lora_swig.new_decode_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(decode_sptr self) -> decode"""
        return _lora_swig.decode_sptr___deref__(self)

    __swig_destroy__ = _lora_swig.delete_decode_sptr
    __del__ = lambda self: None

    def make(self, spreading_factor, code_rate, low_data_rate, header):
        """
        make(decode_sptr self, short spreading_factor, short code_rate, bool low_data_rate, bool header) -> decode_sptr

        Return a shared_ptr to a new instance of lora::decode.

        To avoid accidental use of raw pointers, lora::decode's constructor is in a private implementation class. lora::decode::make is the public interface for creating new instances.

        Params: (spreading_factor, code_rate, low_data_rate, header)
        """
        return _lora_swig.decode_sptr_make(self, spreading_factor, code_rate, low_data_rate, header)


    def history(self):
        """history(decode_sptr self) -> unsigned int"""
        return _lora_swig.decode_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(decode_sptr self, int which, int delay)
        declare_sample_delay(decode_sptr self, unsigned int delay)
        """
        return _lora_swig.decode_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(decode_sptr self, int which) -> unsigned int"""
        return _lora_swig.decode_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(decode_sptr self) -> int"""
        return _lora_swig.decode_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(decode_sptr self) -> double"""
        return _lora_swig.decode_sptr_relative_rate(self)


    def start(self):
        """start(decode_sptr self) -> bool"""
        return _lora_swig.decode_sptr_start(self)


    def stop(self):
        """stop(decode_sptr self) -> bool"""
        return _lora_swig.decode_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(decode_sptr self, unsigned int which_input) -> uint64_t"""
        return _lora_swig.decode_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(decode_sptr self, unsigned int which_output) -> uint64_t"""
        return _lora_swig.decode_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(decode_sptr self) -> int"""
        return _lora_swig.decode_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(decode_sptr self, int m)"""
        return _lora_swig.decode_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(decode_sptr self)"""
        return _lora_swig.decode_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(decode_sptr self) -> bool"""
        return _lora_swig.decode_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(decode_sptr self, int m)"""
        return _lora_swig.decode_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(decode_sptr self) -> int"""
        return _lora_swig.decode_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(decode_sptr self, int i) -> long"""
        return _lora_swig.decode_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(decode_sptr self, long max_output_buffer)
        set_max_output_buffer(decode_sptr self, int port, long max_output_buffer)
        """
        return _lora_swig.decode_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(decode_sptr self, int i) -> long"""
        return _lora_swig.decode_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(decode_sptr self, long min_output_buffer)
        set_min_output_buffer(decode_sptr self, int port, long min_output_buffer)
        """
        return _lora_swig.decode_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(decode_sptr self) -> float"""
        return _lora_swig.decode_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(decode_sptr self) -> float"""
        return _lora_swig.decode_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(decode_sptr self) -> float"""
        return _lora_swig.decode_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(decode_sptr self) -> float"""
        return _lora_swig.decode_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(decode_sptr self) -> float"""
        return _lora_swig.decode_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(decode_sptr self) -> float"""
        return _lora_swig.decode_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(decode_sptr self, int which) -> float
        pc_input_buffers_full(decode_sptr self) -> pmt_vector_float
        """
        return _lora_swig.decode_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(decode_sptr self, int which) -> float
        pc_input_buffers_full_avg(decode_sptr self) -> pmt_vector_float
        """
        return _lora_swig.decode_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(decode_sptr self, int which) -> float
        pc_input_buffers_full_var(decode_sptr self) -> pmt_vector_float
        """
        return _lora_swig.decode_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(decode_sptr self, int which) -> float
        pc_output_buffers_full(decode_sptr self) -> pmt_vector_float
        """
        return _lora_swig.decode_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(decode_sptr self, int which) -> float
        pc_output_buffers_full_avg(decode_sptr self) -> pmt_vector_float
        """
        return _lora_swig.decode_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(decode_sptr self, int which) -> float
        pc_output_buffers_full_var(decode_sptr self) -> pmt_vector_float
        """
        return _lora_swig.decode_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(decode_sptr self) -> float"""
        return _lora_swig.decode_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(decode_sptr self) -> float"""
        return _lora_swig.decode_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(decode_sptr self) -> float"""
        return _lora_swig.decode_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(decode_sptr self) -> float"""
        return _lora_swig.decode_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(decode_sptr self) -> float"""
        return _lora_swig.decode_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(decode_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lora_swig.decode_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(decode_sptr self)"""
        return _lora_swig.decode_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(decode_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lora_swig.decode_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(decode_sptr self) -> int"""
        return _lora_swig.decode_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(decode_sptr self) -> int"""
        return _lora_swig.decode_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(decode_sptr self, int priority) -> int"""
        return _lora_swig.decode_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(decode_sptr self) -> std::string"""
        return _lora_swig.decode_sptr_name(self)


    def symbol_name(self):
        """symbol_name(decode_sptr self) -> std::string"""
        return _lora_swig.decode_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(decode_sptr self) -> io_signature_sptr"""
        return _lora_swig.decode_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(decode_sptr self) -> io_signature_sptr"""
        return _lora_swig.decode_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(decode_sptr self) -> long"""
        return _lora_swig.decode_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(decode_sptr self) -> basic_block_sptr"""
        return _lora_swig.decode_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(decode_sptr self, int ninputs, int noutputs) -> bool"""
        return _lora_swig.decode_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(decode_sptr self) -> std::string"""
        return _lora_swig.decode_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(decode_sptr self, std::string name)"""
        return _lora_swig.decode_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(decode_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lora_swig.decode_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(decode_sptr self) -> swig_int_ptr"""
        return _lora_swig.decode_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(decode_sptr self) -> swig_int_ptr"""
        return _lora_swig.decode_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(decode_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lora_swig.decode_sptr_message_subscribers(self, which_port)

decode_sptr_swigregister = _lora_swig.decode_sptr_swigregister
decode_sptr_swigregister(decode_sptr)


decode_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
decode = decode.make;

class mod(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(spreading_factor, d_sync_word):
        """
        make(short spreading_factor, unsigned char d_sync_word) -> mod_sptr

        Return a shared_ptr to a new instance of lora::mod.

        To avoid accidental use of raw pointers, lora::mod's constructor is in a private implementation class. lora::mod::make is the public interface for creating new instances.

        Params: (spreading_factor, d_sync_word)
        """
        return _lora_swig.mod_make(spreading_factor, d_sync_word)

    make = staticmethod(make)
    __swig_destroy__ = _lora_swig.delete_mod
    __del__ = lambda self: None
mod_swigregister = _lora_swig.mod_swigregister
mod_swigregister(mod)

def mod_make(spreading_factor, d_sync_word):
    """
    mod_make(short spreading_factor, unsigned char d_sync_word) -> mod_sptr

    Return a shared_ptr to a new instance of lora::mod.

    To avoid accidental use of raw pointers, lora::mod's constructor is in a private implementation class. lora::mod::make is the public interface for creating new instances.

    Params: (spreading_factor, d_sync_word)
    """
    return _lora_swig.mod_make(spreading_factor, d_sync_word)

class mod_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lora::mod)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lora::mod)> self) -> mod_sptr
        __init__(boost::shared_ptr<(gr::lora::mod)> self, mod p) -> mod_sptr
        """
        this = _lora_swig.new_mod_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(mod_sptr self) -> mod"""
        return _lora_swig.mod_sptr___deref__(self)

    __swig_destroy__ = _lora_swig.delete_mod_sptr
    __del__ = lambda self: None

    def make(self, spreading_factor, d_sync_word):
        """
        make(mod_sptr self, short spreading_factor, unsigned char d_sync_word) -> mod_sptr

        Return a shared_ptr to a new instance of lora::mod.

        To avoid accidental use of raw pointers, lora::mod's constructor is in a private implementation class. lora::mod::make is the public interface for creating new instances.

        Params: (spreading_factor, d_sync_word)
        """
        return _lora_swig.mod_sptr_make(self, spreading_factor, d_sync_word)


    def history(self):
        """history(mod_sptr self) -> unsigned int"""
        return _lora_swig.mod_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(mod_sptr self, int which, int delay)
        declare_sample_delay(mod_sptr self, unsigned int delay)
        """
        return _lora_swig.mod_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(mod_sptr self, int which) -> unsigned int"""
        return _lora_swig.mod_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(mod_sptr self) -> int"""
        return _lora_swig.mod_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(mod_sptr self) -> double"""
        return _lora_swig.mod_sptr_relative_rate(self)


    def start(self):
        """start(mod_sptr self) -> bool"""
        return _lora_swig.mod_sptr_start(self)


    def stop(self):
        """stop(mod_sptr self) -> bool"""
        return _lora_swig.mod_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(mod_sptr self, unsigned int which_input) -> uint64_t"""
        return _lora_swig.mod_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(mod_sptr self, unsigned int which_output) -> uint64_t"""
        return _lora_swig.mod_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(mod_sptr self) -> int"""
        return _lora_swig.mod_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(mod_sptr self, int m)"""
        return _lora_swig.mod_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(mod_sptr self)"""
        return _lora_swig.mod_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(mod_sptr self) -> bool"""
        return _lora_swig.mod_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(mod_sptr self, int m)"""
        return _lora_swig.mod_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(mod_sptr self) -> int"""
        return _lora_swig.mod_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(mod_sptr self, int i) -> long"""
        return _lora_swig.mod_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(mod_sptr self, long max_output_buffer)
        set_max_output_buffer(mod_sptr self, int port, long max_output_buffer)
        """
        return _lora_swig.mod_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(mod_sptr self, int i) -> long"""
        return _lora_swig.mod_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(mod_sptr self, long min_output_buffer)
        set_min_output_buffer(mod_sptr self, int port, long min_output_buffer)
        """
        return _lora_swig.mod_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(mod_sptr self) -> float"""
        return _lora_swig.mod_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(mod_sptr self) -> float"""
        return _lora_swig.mod_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(mod_sptr self) -> float"""
        return _lora_swig.mod_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(mod_sptr self) -> float"""
        return _lora_swig.mod_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(mod_sptr self) -> float"""
        return _lora_swig.mod_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(mod_sptr self) -> float"""
        return _lora_swig.mod_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(mod_sptr self, int which) -> float
        pc_input_buffers_full(mod_sptr self) -> pmt_vector_float
        """
        return _lora_swig.mod_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(mod_sptr self, int which) -> float
        pc_input_buffers_full_avg(mod_sptr self) -> pmt_vector_float
        """
        return _lora_swig.mod_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(mod_sptr self, int which) -> float
        pc_input_buffers_full_var(mod_sptr self) -> pmt_vector_float
        """
        return _lora_swig.mod_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(mod_sptr self, int which) -> float
        pc_output_buffers_full(mod_sptr self) -> pmt_vector_float
        """
        return _lora_swig.mod_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(mod_sptr self, int which) -> float
        pc_output_buffers_full_avg(mod_sptr self) -> pmt_vector_float
        """
        return _lora_swig.mod_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(mod_sptr self, int which) -> float
        pc_output_buffers_full_var(mod_sptr self) -> pmt_vector_float
        """
        return _lora_swig.mod_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(mod_sptr self) -> float"""
        return _lora_swig.mod_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(mod_sptr self) -> float"""
        return _lora_swig.mod_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(mod_sptr self) -> float"""
        return _lora_swig.mod_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(mod_sptr self) -> float"""
        return _lora_swig.mod_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(mod_sptr self) -> float"""
        return _lora_swig.mod_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(mod_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lora_swig.mod_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(mod_sptr self)"""
        return _lora_swig.mod_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(mod_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lora_swig.mod_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(mod_sptr self) -> int"""
        return _lora_swig.mod_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(mod_sptr self) -> int"""
        return _lora_swig.mod_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(mod_sptr self, int priority) -> int"""
        return _lora_swig.mod_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(mod_sptr self) -> std::string"""
        return _lora_swig.mod_sptr_name(self)


    def symbol_name(self):
        """symbol_name(mod_sptr self) -> std::string"""
        return _lora_swig.mod_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(mod_sptr self) -> io_signature_sptr"""
        return _lora_swig.mod_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(mod_sptr self) -> io_signature_sptr"""
        return _lora_swig.mod_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(mod_sptr self) -> long"""
        return _lora_swig.mod_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(mod_sptr self) -> basic_block_sptr"""
        return _lora_swig.mod_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(mod_sptr self, int ninputs, int noutputs) -> bool"""
        return _lora_swig.mod_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(mod_sptr self) -> std::string"""
        return _lora_swig.mod_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(mod_sptr self, std::string name)"""
        return _lora_swig.mod_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(mod_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lora_swig.mod_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(mod_sptr self) -> swig_int_ptr"""
        return _lora_swig.mod_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(mod_sptr self) -> swig_int_ptr"""
        return _lora_swig.mod_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(mod_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lora_swig.mod_sptr_message_subscribers(self, which_port)

mod_sptr_swigregister = _lora_swig.mod_sptr_swigregister
mod_sptr_swigregister(mod_sptr)


mod_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
mod = mod.make;

class encode(object):
    """<+description of block+>"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(spreading_factor, code_rate, low_data_rate, header):
        """
        make(short spreading_factor, short code_rate, bool low_data_rate, bool header) -> encode_sptr

        Return a shared_ptr to a new instance of lora::encode.

        To avoid accidental use of raw pointers, lora::encode's constructor is in a private implementation class. lora::encode::make is the public interface for creating new instances.

        Params: (spreading_factor, code_rate, low_data_rate, header)
        """
        return _lora_swig.encode_make(spreading_factor, code_rate, low_data_rate, header)

    make = staticmethod(make)
    __swig_destroy__ = _lora_swig.delete_encode
    __del__ = lambda self: None
encode_swigregister = _lora_swig.encode_swigregister
encode_swigregister(encode)

def encode_make(spreading_factor, code_rate, low_data_rate, header):
    """
    encode_make(short spreading_factor, short code_rate, bool low_data_rate, bool header) -> encode_sptr

    Return a shared_ptr to a new instance of lora::encode.

    To avoid accidental use of raw pointers, lora::encode's constructor is in a private implementation class. lora::encode::make is the public interface for creating new instances.

    Params: (spreading_factor, code_rate, low_data_rate, header)
    """
    return _lora_swig.encode_make(spreading_factor, code_rate, low_data_rate, header)

class encode_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::lora::encode)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::lora::encode)> self) -> encode_sptr
        __init__(boost::shared_ptr<(gr::lora::encode)> self, encode p) -> encode_sptr
        """
        this = _lora_swig.new_encode_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(encode_sptr self) -> encode"""
        return _lora_swig.encode_sptr___deref__(self)

    __swig_destroy__ = _lora_swig.delete_encode_sptr
    __del__ = lambda self: None

    def make(self, spreading_factor, code_rate, low_data_rate, header):
        """
        make(encode_sptr self, short spreading_factor, short code_rate, bool low_data_rate, bool header) -> encode_sptr

        Return a shared_ptr to a new instance of lora::encode.

        To avoid accidental use of raw pointers, lora::encode's constructor is in a private implementation class. lora::encode::make is the public interface for creating new instances.

        Params: (spreading_factor, code_rate, low_data_rate, header)
        """
        return _lora_swig.encode_sptr_make(self, spreading_factor, code_rate, low_data_rate, header)


    def history(self):
        """history(encode_sptr self) -> unsigned int"""
        return _lora_swig.encode_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(encode_sptr self, int which, int delay)
        declare_sample_delay(encode_sptr self, unsigned int delay)
        """
        return _lora_swig.encode_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(encode_sptr self, int which) -> unsigned int"""
        return _lora_swig.encode_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(encode_sptr self) -> int"""
        return _lora_swig.encode_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(encode_sptr self) -> double"""
        return _lora_swig.encode_sptr_relative_rate(self)


    def start(self):
        """start(encode_sptr self) -> bool"""
        return _lora_swig.encode_sptr_start(self)


    def stop(self):
        """stop(encode_sptr self) -> bool"""
        return _lora_swig.encode_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(encode_sptr self, unsigned int which_input) -> uint64_t"""
        return _lora_swig.encode_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(encode_sptr self, unsigned int which_output) -> uint64_t"""
        return _lora_swig.encode_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(encode_sptr self) -> int"""
        return _lora_swig.encode_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(encode_sptr self, int m)"""
        return _lora_swig.encode_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(encode_sptr self)"""
        return _lora_swig.encode_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(encode_sptr self) -> bool"""
        return _lora_swig.encode_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(encode_sptr self, int m)"""
        return _lora_swig.encode_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(encode_sptr self) -> int"""
        return _lora_swig.encode_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(encode_sptr self, int i) -> long"""
        return _lora_swig.encode_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(encode_sptr self, long max_output_buffer)
        set_max_output_buffer(encode_sptr self, int port, long max_output_buffer)
        """
        return _lora_swig.encode_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(encode_sptr self, int i) -> long"""
        return _lora_swig.encode_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(encode_sptr self, long min_output_buffer)
        set_min_output_buffer(encode_sptr self, int port, long min_output_buffer)
        """
        return _lora_swig.encode_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(encode_sptr self) -> float"""
        return _lora_swig.encode_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(encode_sptr self) -> float"""
        return _lora_swig.encode_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(encode_sptr self) -> float"""
        return _lora_swig.encode_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(encode_sptr self) -> float"""
        return _lora_swig.encode_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(encode_sptr self) -> float"""
        return _lora_swig.encode_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(encode_sptr self) -> float"""
        return _lora_swig.encode_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(encode_sptr self, int which) -> float
        pc_input_buffers_full(encode_sptr self) -> pmt_vector_float
        """
        return _lora_swig.encode_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(encode_sptr self, int which) -> float
        pc_input_buffers_full_avg(encode_sptr self) -> pmt_vector_float
        """
        return _lora_swig.encode_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(encode_sptr self, int which) -> float
        pc_input_buffers_full_var(encode_sptr self) -> pmt_vector_float
        """
        return _lora_swig.encode_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(encode_sptr self, int which) -> float
        pc_output_buffers_full(encode_sptr self) -> pmt_vector_float
        """
        return _lora_swig.encode_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(encode_sptr self, int which) -> float
        pc_output_buffers_full_avg(encode_sptr self) -> pmt_vector_float
        """
        return _lora_swig.encode_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(encode_sptr self, int which) -> float
        pc_output_buffers_full_var(encode_sptr self) -> pmt_vector_float
        """
        return _lora_swig.encode_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(encode_sptr self) -> float"""
        return _lora_swig.encode_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(encode_sptr self) -> float"""
        return _lora_swig.encode_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(encode_sptr self) -> float"""
        return _lora_swig.encode_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(encode_sptr self) -> float"""
        return _lora_swig.encode_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(encode_sptr self) -> float"""
        return _lora_swig.encode_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(encode_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lora_swig.encode_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(encode_sptr self)"""
        return _lora_swig.encode_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(encode_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lora_swig.encode_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(encode_sptr self) -> int"""
        return _lora_swig.encode_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(encode_sptr self) -> int"""
        return _lora_swig.encode_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(encode_sptr self, int priority) -> int"""
        return _lora_swig.encode_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(encode_sptr self) -> std::string"""
        return _lora_swig.encode_sptr_name(self)


    def symbol_name(self):
        """symbol_name(encode_sptr self) -> std::string"""
        return _lora_swig.encode_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(encode_sptr self) -> io_signature_sptr"""
        return _lora_swig.encode_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(encode_sptr self) -> io_signature_sptr"""
        return _lora_swig.encode_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(encode_sptr self) -> long"""
        return _lora_swig.encode_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(encode_sptr self) -> basic_block_sptr"""
        return _lora_swig.encode_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(encode_sptr self, int ninputs, int noutputs) -> bool"""
        return _lora_swig.encode_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(encode_sptr self) -> std::string"""
        return _lora_swig.encode_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(encode_sptr self, std::string name)"""
        return _lora_swig.encode_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(encode_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _lora_swig.encode_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(encode_sptr self) -> swig_int_ptr"""
        return _lora_swig.encode_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(encode_sptr self) -> swig_int_ptr"""
        return _lora_swig.encode_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(encode_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _lora_swig.encode_sptr_message_subscribers(self, which_port)

encode_sptr_swigregister = _lora_swig.encode_sptr_swigregister
encode_sptr_swigregister(encode_sptr)


encode_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
encode = encode.make;



